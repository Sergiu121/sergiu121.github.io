Interacțiunea cu fișiere în linia de comandă
============================================

Fișierul este unitatea de bază folosită pentru a stoca informații.
Fie că este vorba despre un document (tema la mate) sau un joc, fie că este vorba de o configurare în sistemul de operare, sau chiar sistemul de operare, folosim fișiere pentru stocare.
Directoarele sunt un tip specific de fișier.

Putem interacțioa cu fișiere folosind programe specifice:

* Microsoft Word pentru documente;
* browser pentru pagină web;
* Winamp pentu melodii;
* Vlc pentru filme;

Acestea au în comun o interfață grafică.
O altă opțiune este să interacționăm cu fișierele în linia de comandă.
Acesta este subiectul capitolului nostru.

TODO: poza CLI
.. figure:: res/terminal.png

Folosim linia de comandă pentru interacțiunea cu fișierele în mai multe cazuri:

* Atunci când sistemul pe care ne aflăm are **doar** linie de comandă;
* Atunci când putem să facem anumite operații **mai repede** decât în interfața grafică.
   Putem folosi automatizarea unor sarcini (taskuri): scriem un script (un fișier de automatizare) o dată și îl executăm de fiecare dată când este nevoie;

Un motiv în plus pentru a folosi linia de comandă este că folosește mult mai puține resurse decât interfața grafică.
Astfel, putem să facem mai multe cu mai puține resurse.

Componenta ce se ocupă de interpretarea comenzilor este **shell**.
Acesta citește comenzile date de utilizator, le interpretează și comunică sisteemului de operare ce are de făcut.

În Windows se numește **Windows shell**, iar în Linux și MacOS **bash**.

Discutăm în continuare despre cum interacționăm cu fișierele în linia de comandă.



Manipularea fișierelor și directoarelor
------------------------------------------

În această secțiune vom detalia modalități de interacțiune cu fișierele și directoarele din linia de comandă:

* afișarea conținutului fișierelor și directoarelor;
* crearea de fișiere și directoare;
* ștergerea de fișieree și directoare;
* redenumirea fișierelor și directoarelor;
* fișiere și directoare ascunse;
* metadate fișiere și directoare;
* ierarhii;
* legături (linkuri);
* execuția programelor.

Afișarea conținutului unui director
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Așa cum un dosar are mai multe foi în el, așa directoarele au mai multe fișiere și directoare în ele.

Pentru a afișa conținutul unui director folosim comanda ``ls``:

.. code-block:: bash

    student@uso:~/comenzi/mkdir/Avengers$ ls
    Captain America  Iron Man  Thor

Pentru a vedea mai multe informații despre fișiere și directoare putem folosi opțiunea *-l* în felul următor: ``ls -l``.

.. code-block:: bash

    student@uso:~/comenzi/touch$ ls -l
    total 0
    -rw-r--r-- 1 student student 0 Sep 29 17:32 orase
    -rw-r--r-- 1 student student 0 Sep 29 17:25 orase romania
    -rw-r--r-- 1 student student 0 Sep 29 17:33 romania

.. code-block:: bash

    student@uso:~/comenzi/mkdir$ ls -l
    total 8
    drwxr-xr-x 2 student student 4096 Sep 29 18:20 Avengers
    drwxr-xr-x 2 student student 4096 Sep 29 19:21 GameOfThrones

Interpretăm rezultatele de mai sus:

#. Primul caracter `-` ne arată că `romania` este un fișier obișnuit. Primul caracter `d` ne arată că `Avengers` este director.
#. Șirurile `rw-r--r--` (pentru `romania`) și `rw-r-xr-x` (pentru `Avengers`) se referă la permisiuni de acces.
   Vorbim despre permisiuni de acces în capitolul :ref:todo_Referinta_permisiuni.
#. Următorul număr (`1` pentru `romania` și `2` pentru `Avengers`) se referă la numărul de legături către el (putem să facem o paralelă cu Shortcut-urile din Windows).
   Vom detalia legăturile în capitolul :ref:_todo_referinta_permisiuni.
#. Următoarul cuvânt, `student`, se referă la utilizatorul care deține fișierul/directorul `romania`/`Avengers`;
#. Al doilea `student` se referă la grupul ce deține fișierul/directorul `romania` și `Avengers`;
#. Numărul `0` specifică dimensiunea fișierului `romania`.
   Observăm că directorul `Avengers` are dimensiunea de 4096 Octeți (Bytes);
#. Urmează 3 coloane ce specifică luna, ziua și data ultime accesări.
   O accesare poate înseamna creare sau modificare.
   Citirea nu schimbă această dată.
#. La final este specificat numele fișierului sau a directorului.


.. note::
    Vom discuta despre legături în capitolul ##### TODO EDI ######.



Exerciții - afișarea conținutului directoarelor
"""""""""""""""""""""""""""""""""""""""""""""""

* Afișați conținutul directoarelor **Avengers** și **Game of Thrones**;
* Afișați conținutul directoarelor **Avengers** și **Game of Thrones** folosind opțiunea **-l**.


.. important::
    Este important de reținut: orice comandă executați aceasta trebuie succedată de o verificare.
    De exemplu, la crearea unui fișier (``touch``) sau director (``mkdir``), executăm comanda de verificare ``ls``.


Crearea fișierelor
^^^^^^^^^^^^^^^^^^

Există cazuri când vrem să creăm fișiere.
Fișierele se creează folosind utilitarul ``touch``.

Creăm un fișier, astfel:

.. code-block:: bash

    student@uso:~$ ls orase
    ls: cannot access orase: No such file or directory
    student@uso:~$ touch orase
    student@uso:~$ ls orase
    orase


Dacă vrem să creăm un fișier cu numele `orașe romania`, adică vrem ca numele fișierului să conțină caracterul *spațiu (space)*, folosim tot comanda ``touch`` ca în exemplul de mai jos:

.. code-block:: bash

    student@uso:~/touch$ touch orase romania
    student@uso:~/touch$ ls
    orase  romania

Observăm că în comanda de mai sus am încercat să creăm un fișier numit `orase romania`, însă au fost create două fișiere.
Pentru a crea un fișier cu *spațiui (space)* înclus în nume este nevoie să folosim ghilimelele la începutul și sfârșitul numelui astfel: ``touch "orase romania"``.

.. code-block:: bash

    student@uso:~/touch$ touch "judete romania"
    student@uso:~/touch$ ls -l
    total 0
    -rw-r--r-- 1 student student 0 Sep 29 17:22 orase
    -rw-r--r-- 1 student student 0 Sep 29 17:25 judete romania
    -rw-r--r-- 1 student student 0 Sep 29 17:22 romania


Acum avem în directorul `~` 3 fișiere: orase, judete romania, romania.
Zero-ul *(0)* din linia `-rw-r--r-- 1 student student 0 Sep 29 17:22` orase ne arată că fișierul orase are 0 bytes, adică este gol.
Toate cele 3 fișiere sunt goale.



Ce se va întâmpla dacă executăm ``touch`` pe un fișier existent?

Creăm un nou fișier cu numele romania folosind comanda touch:

.. code-block:: bash

    student@uso:~/touch$ ls -l
    total 0
    -rw-r--r-- 1 student student 0 Sep 29 17:32 orase
    -rw-r--r-- 1 student student 0 Sep 29 17:25 judete romania
    -rw-r--r-- 1 student student 0 Sep 29 17:22 romania
    student@uso:~/touch$ date
    Tue Sep 29 17:32:55 EEST 2020
    student@uso:~/touch$ touch romania
    student@uso:~/touch$ ls -l
    total 0
    -rw-r--r-- 1 student student 0 Sep 29 17:32 orase
    -rw-r--r-- 1 student student 0 Sep 29 17:25 judete romania
    -rw-r--r-- 1 student student 0 Sep 29 17:33 romania


În continuare avem tot 3 fișiere în directorul `~`.
Ne uităm la liniile `-rw-r--r-- 1 student student 0 Sep 29 17:22 romania` *(de dinainte)* și `-rw-r--r-- 1 student student 0 Sep 29 17:33 romania` *(de după)* și vedem că diferă ora.
Este vorba despre ora la care a fost ultima dată accesat fișierul `romania`.

Mai multe detalii sunt expuse la capitolul de metadate din subsecțiunea :ref:todo_referinta_seciunea_respectiva.

Crearea directoarelor
^^^^^^^^^^^^^^^^^^^^^

Este util să creăm directoarele atunci când vrem să păstrăm fișierele din sistem într-un mod organizat.
Creăm directoarele folosind utilitarul ``mkdir``.
Etimologia comenzii provine din limba engleză - *Make Directory*.

Creăm un director nou în directorul `~/comenzi/mkdir` ca în exemplul de mai jos:

.. code-block:: bash

    student@uso:~/comenzi/mkdir$ mkdir "Game of Thrones"
    student@uso:~/comenzi/mkdir$ mkdir Avengers
    student@uso:~/comenzi/mkdir$ ll
    total 8
    drwxr-xr-x 2 student student 4096 Sep 29 17:43 Avengers
    drwxr-xr-x 2 student student 4096 Sep 29 17:43 Game of Thrones

Am creat 2 directoare noi: `Avengers` și `Game of Thrones`.
Pentru crearea directorului `Game of Thrones` am folosit ghilimele pentru a înconjura numele ales, la fel ca în cazul creării fișierelor din subsecțiunea :ref:todo_ref_`Crearea fișierelor`.



Exerciții - creare fișiere și directoare
""""""""""""""""""""""""""""""""""""""""

* Creați două directoare: "Avengers", "Game of Thrones";
* Creați fișierele "Iron Man", "Hulk", "Thor", "Captain America" în directorul "Avengers"
* Creați fișierele "Arya Stark", "Daenerys Targaryen", "Jon Snow", "Tyrion Lannister" în directorul "Game of Thrones";


Afișarea conținutului unui fișier
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Afișăm rapid conținutul fișierului `Arya Stark` din directorul `Game of Thrones` folosind comanda ``cat``:

.. code-block:: bash

    student@uso:~/comenzi/mkdir$ cat "Game of Thrones/Arya Stark"
    A girl has no name


.. hint::
    Pentru a adăuga rapid text într-un fișier folosim utilitarul ``echo`` astfel:

    .. code-block:: bash

        student@uso:~$ echo "A girl has no name" > "comenzi/mkdir/GameOfThrones/Arya Stark"
        student@uso:~$ cat "comenzi/mkdir/GameOfThrones/Arya Stark"
        A girl has no name

Am folosit ghilimele *(")* pentru că exista spațiu atât în textul pe care vrem csă-l scriem, cât și în numele fișierului.


O altă metodă este de a folosi un editor de text: **vim**, **gedit**, **emacs**, **nano**, **sublime**, etc.
Vom detalia utilizarea unui editor de text în subsectiunea :ref:todo_ref_editor_Text.


Ștergerea fișierelor
^^^^^^^^^^^^^^^^^^^^

Fișierele se șterg folosind utilitarul ``rm``.

.. code-block:: bash

    student@uso:~/comenzi/mkdir$ ls Avengers/
    Captain America  Hulk  Iron Man  Thor
    student@uso:~/comenzi/mkdir$ rm Avengers/Hulk
    student@uso:~/comenzi/mkdir$ ls Avengers/
    Captain America  Iron Man  Thor


Ștergerea directoarelor
^^^^^^^^^^^^^^^^^^^^^^^

Directoarele se șterg folosind comanda ``rmdir``.
Etimologia comenzii provine din engleză - *Remove Directory*.

.. code-block:: bash

    student@uso:~/comenzi/mkdir$ mkdir "Lord of the Rings"
    student@uso:~/comenzi/mkdir$ ls -l
    total 12
    drwxr-xr-x 2 student student 4096 Sep 29 18:02 Avengers
    drwxr-xr-x 2 student student 4096 Sep 29 17:44 Game of Thrones
    drwxr-xr-x 2 student student 4096 Sep 29 18:09 Lord of the Rings
    student@uso:~/comenzi/mkdir$ rmdir "Lord of the Rings"
    student@uso:~/comenzi/mkdir$ ls -l
    total 8
    drwxr-xr-x 2 student student 4096 Sep 29 18:02 Avengers
    drwxr-xr-x 2 student student 4096 Sep 29 17:44 Game of Thrones

.. important::
    Comanda ``rmdir`` pe un director care nu este gol (care conține cel puțin un alt fișier sau director) nu funcționează.


.. code-block:: bash

    student@uso:~/comenzi/mkdir$ rmdir Avengers/
    rmdir: failed to remove 'Avengers/': Directory not empty


Pentru a șterge un director gol, folosim utilitarul ``rm`` cu opțiunile de recursivitate ``-r`` și forțat ``-f``: ``rm -rf``.

.. code-block:: bash

    student@uso:~/comenzi/mkdir$ ls -l
    total 8
    drwxr-xr-x 2 student student 4096 Sep 29 18:02 Avengers
    drwxr-xr-x 2 student student 4096 Sep 29 17:44 Game of Thrones
    student@uso:~/comenzi/mkdir$ rm -rf Avengers/
    student@uso:~/comenzi/mkdir$ ls -l
    total 4
    drwxr-xr-x 2 student student 4096 Sep 29 17:44 Game of Thrones


.. important::
    După executarea comenzii, verificăm corectitudinea operației.

Redenumirea și mutarea fișierelor și directoarelor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Fișierele și directoarele se redenumesc în mod similar, folosind comanda ``mv`` astfel: ``mv nume_actual nume_nou``.

Redenumim fișierele si directoarele folosind comanda ``mv``:

.. code-block:: bash

    student@uso:~/comenzi/mkdir$ ls
    Game of Thrones
    student@uso:~/comenzi/mkdir$ mv "Game of Thrones" GameOfThrones
    student@uso:~/comenzi/mkdir$ ls
    GameOfThrones

Am redenumit fișierul `Game of Thrones` în `GameOfThrones`.

Un alt rol al comenzii ``mv`` este de a muta fișierele și directoarele, în ierarhia de fișiere, dintr-un loc în altul.

Mutăm directorul `GameOfThrones` (cu tot conținutul acestuia) la calea `/tmp/` folosind comanda ``mv``:
.. code-block:: bash

    student@uso:~/comenzi/mkdir$ ls
    Avengers  GameOfThrones
    student@uso:~/comenzi/mkdir$ mv GameOfThrones/ /tmp/
    student@uso:~/comenzi/mkdir$ ls /tmp/
    GameOfThrones  ssh-ApUMKI3HSJ
    student@uso:~/comenzi/mkdir$ ls /tmp/
    GameOfThrones  ssh-ApUMKI3HSJ
    student@uso:~/comenzi/mkdir$ ls
    Avengers

Acum directorul `GameOfThrones` se află în calea `/tmp/GameOfThrones`.
Am verificat folosind ``ls`` că nu se mai află în directorul curent și că există în directorul `/tmp/`.

Mutăm înapoi directorul `GameOfThrones` (cu tot conținutul acestuia) folosind cale relativă pentru a specifica directorul și cale absoluta pentru a specifica locația unde vrem să ajungă directorul folosind ``mv``:

.. code-block:: bash

    student@uso:~/comenzi/mkdir$ mv ../../../../tmp/GameOfThrones/ /home/student/comenzi/mkdir/
    student@uso:~/comenzi/mkdir$ ls
    Avengers  GameOfThrones

Am verificat că directorul `GameOfThrones` se află la calea specificată (calea curentă).

.. note::
    Observăm că putem folosi atât căi relative cât și căi absolute.

Exerciții - redenumire și mutare
""""""""""""""""""""""""""""""""

* Redenumiți directorul `Game of Thrones` în `GameOfThrones`;
* Mutați fișierele din interiorul directorului `GameOfThrones` în `/tmp`;
* Verificați operațiile;
* Mutați directorul înapoi la locatia inițială folosind atât căi relative cât și căi absolute.

Copierea fișierelor și directoarelor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Copiem fișierul `Thor` din directorul `Avengers` în calea curentă *(.)* folosind ``cp``:

.. code-block:: bash

    student@uso:~/comenzi/mkdir$ cp Avengers/Thor .
    student@uso:~/comenzi/mkdir$ ls -l
    total 8
    drwxr-xr-x 2 student student 4096 Sep 29 18:20 Avengers
    drwxr-xr-x 2 student student 4096 Sep 29 17:44 GameOfThrones
    -rw-r--r-- 1 student student    0 Sep 29 19:04 Thor

Copeim fișierul `Thor` din calea curentă în directorul `/tmp/` folosind ``cp``:

.. code-block:: bash

    student@uso:~/comenzi/mkdir$ cp Thor /tmp/
    student@uso:~/comenzi/mkdir$ ls /tmp/
    Thor  ssh-ApUMKI3HSJ

Acum fișierul `Thor` precum și conținutul lui se află atât în calea curentă cât și în `/tmp/Thor`.

.. code-block:: bash

    student@uso:~/comenzi/mkdir$ cp Avengers/ /tmp/
    cp: omitting directory 'Avengers/'

Observăm că nu se poate copia un director ce conține alte fișiere sau directoare.

Pentru a copia în altă parte un director care nu este gol trebuie să folosim comanda ``cp -r``:

.. code-block:: bash

    student@uso:~/comenzi/mkdir$ cp -r Avengers/ /tmp/
    student@uso:~/comenzi/mkdir$ ll /tmp/
    total 8
    drwxr-xr-x 2 student student 4096 Sep 29 19:06 Avengers
    -rw-r--r-- 1 student student    0 Sep 29 19:04 Thor
    drwx------ 2 student student 4096 Sep 29 13:45 ssh-ApUMKI3HSJ
    student@uso:~/comenzi/mkdir$ ll /tmp/Avengers/
    total 0
    -rw-r--r-- 1 student student 0 Sep 29 19:06 Captain America
    -rw-r--r-- 1 student student 0 Sep 29 19:06 Iron Man
    -rw-r--r-- 1 student student 0 Sep 29 19:06 Thor

Am copiat directorul `Avengers` și conținutul acestuia din calea curentă în directorul `/tmp`.
Observăm că s-a copiat întreaga ierarhie de fișiere/directoare de sub directorul `Avengers`.
Acesta se află acum în ambele locații.

Fișiere și directoare ascunse
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Un fișier sau director este ascuns atunci când nu apare în mod normal în ierarhia de fișiere.
De exemplu, atunci când executăm într-un director comanda ``ls``, acesta nu apare.

Există câteva motive pentru care vrem să ascundem un fișier sau director:

* Există fișiere pe care nu vrem să le vedem în mod normal (fișiere de configurare; ex: `.profile`);
* Există comenzi care șterg toate fișierele dintr-un director (``rm Avengers/*``).
  Acesta nu are efect asupra fișierelor ascunse;
* Vrem să facem anumite fișiere puțin mai greu de găsit.

Vedem fișiere și directoare ascunse folosind comanda ``ls -a``:

.. code-block:: bash

    student@uso:~/comenzi/mkdir$ ls -al
    total 8
    drwxr-xr-x 5 student student 4096 Sep 29 18:41 .
    drwxr-xr-x 4 student student 4096 Sep 29 18:35 ..
    drwxr-xr-x 2 student student 4096 Sep 29 18:20 Avengers
    drwxr-xr-x 2 student student 4096 Sep 29 17:44 GameOfThrones

Opțiunea `-a` vine de la *all*, adică vrem să vedem toate fișierele: și cele vizibile și cele ascunse.


Creăm fișiere ascunse punând un punct *(.)* în fața numelui:

.. code-block:: bash

    student@uso:~/comenzi/mkdir/Avengers$ ls -l
    total 0
    -rw-r--r-- 1 student student 0 Sep 29 18:20 Captain America
    -rw-r--r-- 1 student student 0 Sep 29 18:20 Iron Man
    -rw-r--r-- 1 student student 0 Sep 29 18:20 Thor
    student@uso:~/comenzi/mkdir/Avengers$ touch .Hulk
    student@uso:~/comenzi/mkdir/Avengers$ ls -l
    total 0
    -rw-r--r-- 1 student student 0 Sep 29 18:20 Captain America
    -rw-r--r-- 1 student student 0 Sep 29 18:20 Iron Man
    -rw-r--r-- 1 student student 0 Sep 29 18:20 Thor
    student@uso:~/comenzi/mkdir/Avengers$ ls -al
    total 8
    drwxr-xr-x 2 student student 4096 Oct  6 16:44 .
    drwxr-xr-x 5 student student 4096 Sep 29 19:14 ..
    -rw-r--r-- 1 student student    0 Oct  6 16:44 .Hulk
    -rw-r--r-- 1 student student    0 Sep 29 18:20 Captain America
    -rw-r--r-- 1 student student    0 Sep 29 18:20 Iron Man
    -rw-r--r-- 1 student student    0 Sep 29 18:20 Thor

Am creat fișierul ascuns `.Hulk`.
Observăm că acesta nu se vede la execuția `ls -l`.

Similar, creăm directoare ascunse punând un *(.)* în fața numelui:

.. code-block:: bash

    student@uso:~/comenzi/mkdir$ mkdir .LordOfTheRings
    student@uso:~/comenzi/mkdir$ ls
    Avengers  GameOfThrones
    student@uso:~/comenzi/mkdir$ ls -a
    .  ..  .LordOfTheRings  Avengers  GameOfThrones
    student@uso:~/comenzi/mkdir$ ls -al
    total 20
    drwxr-xr-x 5 student student 4096 Sep 29 18:41 .
    drwxr-xr-x 4 student student 4096 Sep 29 18:35 ..
    drwxr-xr-x 2 student student 4096 Sep 29 18:41 .LordOfTheRings
    drwxr-xr-x 2 student student 4096 Sep 29 18:20 Avengers
    drwxr-xr-x 2 student student 4096 Sep 29 17:44 GameOfThrones

Am creat directorul ascuns `.LordOfTheRings`.

Exerciții - creare fișiere/directoare ascunse
"""""""""""""""""""""""""""""""""""""""""""""

* Creați un director cu numele **.LordOfTheRings**;
* Intrați în directorul creat;
* Creați 3 fișiere ascunse cu numele **Aragorn**, **Legolas**, **Frodo Baggins**;
* Verificați operațiile de creare (director și fișiere).


Afișarea informațiilor de tip metadata pentru un fișier
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Atunci când vrem să aflăm informații suplimentare despre existența unui fișier/director, putem să-i citim informațiile de tip *metadata*.

Informațiile de tip metadata pentru un fișier/director includ informații legate de dimensiune, data de creare/accesare, permisiuni, tipul de fișier.

Pentru a afla informații suplimentare despre fișiere/directoare, putem folosi comanda ``stat``:

.. code-block:: bash

    student@uso:~/comenzi/mkdir/GameOfThrones$ stat Arya\ Stark
      File: 'Arya Stark'
      Size: 19        	Blocks: 8          IO Block: 4096   regular file
    Device: 801h/2049d	Inode: 152526      Links: 1
    Access: (0644/-rw-r--r--)  Uid: ( 1000/ student)   Gid: ( 1000/ student)
    Access: 2020-10-06 16:50:01.692000000 +0300
    Modify: 2020-10-06 16:50:01.692000000 +0300
    Change: 2020-10-06 16:50:01.692000000 +0300
     Birth: -

Observăm că fișierul **Arya Stark** are 19 octeți.
Acesta a fost modificat pe *6 Octombrie 2020* la ora *16.50*.

Citim fișierul `Arya Stark` să vedem ce schimbări se produc:

.. code-block:: bash

    student@uso:~/comenzi/mkdir/GameOfThrones$ cat Arya\ Stark
    A girl has no name
    student@uso:~/comenzi/mkdir/GameOfThrones$ stat Arya\ Stark
      File: 'Arya Stark'
      Size: 19        	Blocks: 8          IO Block: 4096   regular file
    Device: 801h/2049d	Inode: 152526      Links: 1
    Access: (0644/-rw-r--r--)  Uid: ( 1000/ student)   Gid: ( 1000/ student)
    Access: 2020-10-06 16:50:15.696000000 +0300
    Modify: 2020-10-06 16:50:01.692000000 +0300
    Change: 2020-10-06 16:50:01.692000000 +0300
     Birth: -

Observăm o actualizare la nivelul câmpului *Access*.

Exerciții - afișare metadate
""""""""""""""""""""""""""""

* Afișați metadatele directoarelor **GameOfThrons** și **LordOfTheRings**.
* Afișați metadatele fișierelor **Arya Stark** și **Hulk**.


Afișarea tipului de fișier
^^^^^^^^^^^^^^^^^^^^^^^^^^

O ierarhie de fișiere este formată din directoare și fișiere.
Fișierele pot fi de mai multe tipuri: text, binare, imagini, arhive, etc.

Pentru a afla tipul fișierului folosim comanda ``file``:

.. code-block:: bash

    student@uso:~$ file Picture.abc
    Picture.abc: PNG image data, 742 x 320, 8-bit/color RGBA, non-interlaced
    student@uso:~$ file index.rst
    index.rst: ASCII text
    student@uso:~$ file archive.tar
    archive.tar: POSIX tar archive (GNU) 

Observăm că fișierul `Picture.abc` este un fișier de tipul *PNG* în ciuda extensiei, iar `archive.tar` este oa rhivă de tipul *tar*.

Vom prezenta mai multe detalii în capitolul :ref:todo_referinta_capitol_edi.


.. important::
    Putem învăța mai multe detalii despre comenzile prezentate uitându-ne în manual ``man comandă``.
    Exemplu: `man rm`

.. note::
    Putem referi fișierele și directoarele atât cu căi relative, cât și cu absolute indiferent de utilitarul folosit.


Ierarhie de fișiere
-------------------

Fișierele sunt dispuse într-o formă arborescentă, ierarhică.

Un astfel de exemplu este următorul:

.. code-block:: bash

    student@uso:~$ tree
    .
    ├── Makefile
    ├── README.md
    ├── _static
    │   └── my_theme.css
    ├── _templates
    │   └── layout.html
    ├── chapters
    │   ├── files
    │   │   ├── archive.rst
    │   │   ├── file_editor.rst
    │   │   ├── file_system.rst
    │   │   ├── files.rst
    │   │   ├── io_redirection.rst
    │   │   └── paths.rst
    │   └── net
    │       ├── browser.rst
    │       ├── extra.rst
    │       ├── img
    │       │   └── browser.png
    │       ├── services.rst
    │       └── troubleshoot.rst
    ├── conf.py
    ├── docker
    │   ├── Dockerfile
    │   └── docker-compose.yml
    ├── index.rst
    ├── make.bat
    └── requirements.txt

Putem vedea că directorul curent **chapter** include 2 directoare **files** și **net**.
Directorul **files** conține 6 fișiere, iar directorul **net** conține 4 fișiere și un director **img** care conține la rândul său un fișier.

Pentru a vedea fișierele sub formă arborescentă, folosim comanda ``tree``.

.. note::
    Putem învăța mai multe detalii despre comandă uitându-ne în manual: ``man tree``.

.. important::
    Vârful acestei ierarhii este directorul **/** (directorul root).

.. code-block:: bash

    student@uso:~/comenzi/mkdir$ tree -L 1 /
    /
    |-- bin
    |-- boot
    |-- dev
    |-- etc
    |-- home
    |-- initrd.img -> /boot/initrd.img-3.16.0-4-586
    |-- lib
    |-- lib64
    |-- libx32
    |-- lost+found
    |-- media
    |-- mnt
    |-- opt
    |-- proc
    |-- root
    |-- run
    |-- sbin
    |-- srv
    |-- sys
    |-- tmp
    |-- usr
    |-- var
    `-- vmlinuz -> boot/vmlinuz-3.16.0-4-586



Exerciții - ierarhii de fișiere și directoare
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* Afișați ierarhia de fișiere pornind de la directorul vostru home (~).
* Creați următoarea ierarhie pornind de la directorul **/home/student/**:

.. code-block:: bash

    student@uso:~$ tree
    .
    ├── prime_video
    ├── Hulu
    │   └── Favorite
    ├── Netflix
    │   ├── Filme
    │   │   ├── filme_2020.txt
    │   │   ├── filme_2019.txt
    │   │   ├── filme_vechi
    │   └── Seriale
    │       ├── seriale_2020
    │       ├── seriale_2019.txt
    │       └── seriale_vechi
    ├── HBO_GO
    │   ├── Modern_Family.txt
    │   └── Harry_Potter
    └── YouTubeTV

* Copiați întreaga ierarhie în calea **/tmp**. Folosiți comanda ``cp``.
* Confirmați copierea prin afișarea directorului părinte.
* Ștergeți fișierul **Favorite** din Directorul Hulu. Confirmați ștergerea prin afișarea directorului părinte.
* Ștergeți directorul *prime video*.
* Confirmați ștergerea prin afișarea directorului părinte.
* Ștergeți directorul *HBO GO*.
* Găsiți parametrii corespunzători ștergerii unui director care nu este gol.
* Confirmați ștergerea prin afișarea directorului părinte.
* Ștergeri ierarhia de directoare începând cu directorul **Netflix**.
* Confirmați ștergerea prin afișarea directorului părinte.

Exerciții - ierarhii de fișiere și directoare
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* Creați ierarhia de directoare de mai jos.
* Căutați parametrul necesar pentru ``mkdir`` pentru a crea toată ierarhia **dintr-o singură executare a comenzii**:

.. code-block:: bash

    student@uso:~$ tree
    .
    └─── Cale
        └─── Lungă
             └─── De
                  └─── Directoare

* Mutați ierarhia copiată anterior în **/tmp** în directorul **Directoare**.

Legături (Links)
----------------

O legătură este o scurtătură către un fișier sau un director.
Acestia sunt necesare atunci când nu vrem să parcurgem toată ierarhia de fișiere.
De exemplu, punem executabilul jocului **Warcraft3** pe Desktop pentru a-l accesa rapid.
Mai multe legături pot referi același director/fișier.

Există 2 tipuri de legături:

* Legături simbolice (soft links)
* Legături strânse (hard links)


Legături simbolice (Soft Links)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Caracteristici:**

* Similar *Shortcut* din Windows;
* Orice modificare în fisierul țintă, se vede și în fișierul legătură;
* Este o legătură către numele fișierului și nu către conținut;
* Dacă fișierul este mutat sau redenumit, legătura se pierde;
* Putem crea legături simbolice către directoare.

Creăm o legătură simbolică către directorul /home/student/comenzi/mkdir/ folosind comanda ``ln -s``:

.. code-block:: bash

    student@uso:~/comenzi/ls$ ln -s ~/comenzi/mkdir/ .
    student@uso:~/comenzi/ls$ ll
    total 0
    lrwxrwxrwx 1 student student 28 Oct  6 17:58 mkdir -> /home/student/comenzi/mkdir/


Observăm că fișierul creat este *link* (are primul caracter `l`).
Mai mult, observăm că acest link este o scurtătură către calea `/home/student/comenzi/mkdir/`.

.. code-block::bash

    student@uso:~/comenzi/ls$ ls -l mkdir/
    total 8
    drwxr-xr-x 2 student student 4096 Oct  6 16:44 Avengers
    drwxr-xr-x 2 student student 4096 Oct  6 16:50 GameOfThrones
    student@uso:~/comenzi/ls$ ls -l mkdir/Avengers/
    total 0
    -rw-r--r-- 1 student student 0 Sep 29 18:20 Captain America
    -rw-r--r-- 1 student student 0 Sep 29 18:20 Iron Man
    -rw-r--r-- 1 student student 0 Sep 29 18:20 Thor

Observăm că putem accesa întreaga ierarhie de fișiere și directoare.

Vedem în continuare ce se întâmplă dacă ștergem un fișier.

.. code-block:: bash

    student@uso:/tmp$ ls -l /home/student/comenzi/mkdir/
    total 8
    drwxr-xr-x 2 student student 4096 Sep 29 18:20 Avengers
    drwxr-xr-x 2 student student 4096 Sep 29 17:44 GameOfThrones
    -rw-r--r-- 1 student student    0 Sep 29 19:04 Thor
    student@uso:/tmp$ ls
    mkdir  ssh-ApUMKI3HSJ
    student@uso:/tmp$ rm mkdir/Thor
    student@uso:/tmp$ ls mkdir/
    Avengers  GameOfThrones
    student@uso:/tmp$ ls -l /home/student/comenzi/mkdir/
    total 8
    drwxr-xr-x 2 student student 4096 Sep 29 18:20 Avengers
    drwxr-xr-x 2 student student 4096 Sep 29 17:44 GameOfThrones

Observăm că dacă am șters un fișier accesându-l prin legătura simbolică, s-a șters și la destinație.

Exerciții - legătură simbolică
""""""""""""""""""""""""""""""

* Creați o legătură simbolică în directorul vostru `home` către directorul **Netflix**.
* Verificați crearea legăturii prin afișarea conținutului directorului părinte.
* Afișați conținutul legăturii.
* Ștergeți directorul **Netflix**.
* Afișați conținutul legăturii.


Legături strânse (Hard Links)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Caracteristici:**

* Rămân legate indiferent dacă fișierul țintă este mutat sau redenumit;
* Chiar dacă fișierul inițial este șters, legătura conține datele fișierului țintă;
* Orice modificare în fișierul țintă, se vede și în fișierul legătură.
* Au conținutul(dimensiunea) fișierului țintă;
* **Nu putem crea legături strânse către directoare**.

Creăm legături strânse *(hard)*, astfel:

.. code-block:: bash

    student@uso:/tmp$ ln "/home/student/comenzi/mkdir/GameOfThrones/Arya Stark" Arya
    student@uso:/tmp$ ls -l
    total 8
    -rw-r--r-- 2 student student   19 Sep 29 18:00 Arya
    lrwxrwxrwx 1 student student   28 Sep 29 19:12 mkdir -> /home/student/comenzi/mkdir/
    drwx------ 2 student student 4096 Sep 29 13:45 ssh-ApUMKI3HSJ

Am creat legătura `Aria` care indică spre directorul `"/home/student/comenzi/mkdir/GameOfThrones/Arya Star"`.

În continuare vedem ce se întâmplă atunci când ștergem o legătură strânsă *(hard)*:

.. code-block:: bash

    student@uso:/tmp$ rm "/home/student/comenzi/mkdir/GameOfThrones/Arya Stark"
    student@uso:/tmp$ ls
    Arya  mkdir  ssh-ApUMKI3HSJ
    student@uso:/tmp$ ls -l
    total 8
    -rw-r--r-- 1 student student   19 Sep 29 18:00 Arya
    lrwxrwxrwx 1 student student   28 Sep 29 19:12 mkdir -> /home/student/comenzi/mkdir/
    drwx------ 2 student student 4096 Sep 29 13:45 ssh-ApUMKI3HSJ
    student@uso:/tmp$ cat Arya
    A girl has no name

Observăm că fișierul `Arya` încă există și are același conținut ca originalul chiar dacă acesta a fost șters.

Exerciții - legături strânse
""""""""""""""""""""""""""""
* Creați o legătură strânsă către un fișierul *Modern Family.txt* din ierarhia creată;
* Verificați crearea legăturii prin afișarea conținutului directorului părinte;
* Afișați conținutul legăturii;
* Ștergeți fișierul **Modern Family.txt**;
* Afișați conținutul legăturii.

Execuția programelor
--------------------

Execuția fișierelor se face în felul următor: ``./executabil``.

Avem un executabil **my_ls** care face același lucru ca și comanda ``ls``:

.. code-block:: bash

    student@uso:~/comenzi$ ./my_ls
    executie  mkdir  my_ls	touch

Putem folosi atât calea relativă cât și absolută:

.. code-block:: bash

    student@uso:~/comenzi$ ll
    total 132
    drwxr-xr-x 2 student student   4096 Sep 29 19:25 executie
    drwxr-xr-x 5 student student   4096 Sep 29 19:14 mkdir
    -rwxr-xr-x 1 student student 121032 Sep 29 19:25 my_ls
    drwxr-xr-x 2 student student   4096 Sep 29 17:25 touch
    student@uso:~/comenzi$ ./my_ls
    executie  mkdir  my_ls	touch
    student@uso:~/comenzi$ /home/student/comenzi/my_ls
    executie  mkdir  my_ls	touch

Observăm cum se rulează un executabil atât cu cale relativă (în primul caz) cât și cu cale absolută (în al doilea caz).
